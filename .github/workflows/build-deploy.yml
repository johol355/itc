name: Build and Deploy Medical Guidelines

on:
  push:
    branches: [ main ]
    paths:
      - 'guidelines/**/*.qmd'
      - 'docs/**'
      - 'scripts/**'
      - '.github/workflows/**'
  pull_request:
    branches: [ main ]
    paths:
      - 'guidelines/**/*.qmd'
      - 'docs/**'
      - 'scripts/**'

permissions:
  contents: read
  pages: write
  id-token: write

concurrency:
  group: "pages"
  cancel-in-progress: false

jobs:
  build:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      
    - name: Setup Quarto
      uses: quarto-dev/quarto-actions/setup@v2
      with:
        version: 'release'
        tinytex: true
        
    - name: Setup Pages
      uses: actions/configure-pages@v4
      
    - name: Create output directories
      run: |
        mkdir -p pdfs
        mkdir -p docs/guidelines
        
    - name: Copy checklist assets
      run: |
        # Copy checklist CSS and JS to docs for PWA
        cp -r _extensions/checklist/checklist.css docs/
        cp -r _extensions/checklist/checklist.js docs/
        
        # Copy to docs/guidelines for HTML output
        mkdir -p docs/guidelines/_extensions/checklist
        cp -r _extensions/checklist/* docs/guidelines/_extensions/checklist/
        
    - name: Build guidelines
      run: |
        echo "Building Medical Guidelines..."
        
        # Convert Quarto files to PDFs and HTML
        for file in guidelines/*.qmd; do
          if [ -f "$file" ]; then
            filename=$(basename "$file" .qmd)
            echo "Processing: $filename"
            
            # Render to HTML first (this always works)
            quarto render "$file" --to html --output-dir docs/guidelines
            
            # Quarto sometimes creates nested directories, so move files to correct location
            if [ -f "guidelines/docs/guidelines/$filename.html" ]; then
              mv "guidelines/docs/guidelines/$filename.html" "docs/guidelines/"
              rm -rf "guidelines/docs"
            fi
            
            # Try to render to PDF (with fallback)
            if quarto render "$file" --to pdf --output-dir pdfs 2>/dev/null; then
              echo "✓ PDF generated: $filename"
            else
              echo "⚠ PDF generation failed for: $filename (HTML still available)"
              # Create a placeholder PDF notice
              echo "PDF generation failed. Please use the HTML version for interactive features." > "pdfs/$filename.txt"
            fi
            
            echo "✓ Processed: $filename"
          fi
        done
        
        echo "Build complete!"
        
    - name: Warm cache for new guidelines
      run: |
        # Pre-warm cache by fetching all guidelines once
        echo "Pre-warming cache for emergency access..."
        for file in docs/guidelines/*.html; do
          if [ -f "$file" ]; then
            filename=$(basename "$file")
            echo "Pre-cached: $filename"
          fi
        done
        
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        
    - name: Install dependencies
      run: npm install js-yaml
      
    - name: Generate guidelines index
      run: node scripts/generate-index.js
      
    - name: Update cache version
      run: node scripts/update-cache-version.js
        
    - name: Upload Pages artifact
      uses: actions/upload-pages-artifact@v3
      with:
        path: docs/
        
    - name: Upload PDFs artifact
      uses: actions/upload-artifact@v4
      with:
        name: guidelines-pdfs
        path: pdfs/
        
  deploy:
    if: github.ref == 'refs/heads/main'
    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}
    runs-on: ubuntu-latest
    needs: build
    steps:
      - name: Deploy to GitHub Pages
        id: deployment
        uses: actions/deploy-pages@v4